{"./":{"url":"./","title":"Introduction","keywords":"","body":"Kamigo 簡介 Kamigo 是一個基於 Rails 的 Chatbot MVC Framework。 Kamigo 讓你開發 Chatbot 就跟開發網站一樣容易，甚至可以同時開發網站以及 Chatbot 介面，共用 Controller 和 Model，只需要針對 Chatbot 實作 View。 Kamigo 提供了重要的 generator，讓你開發聊天機器人時可以快的跟飛一樣。 以下將說明如何使用 Kamigo 來製作 Todo 的教學文件。 建立新的 rails 專案 將以下指令全部複製，直接貼到 bash 執行即可。 # 建立新專案 rails new kamigo_demo # 進入專案 cd kamigo_demo # 安裝套件 bundle add kamigo bundle add dotenv-rails # 新增 resource controller rails g scaffold todo name desc rails db:create rails db:migrate 設定首頁 在 config/routes.rb 當中加入首頁設定： root to: \"todos#index\" 安裝 js 套件 在 app/assets/javascripts/application.js 當中加入一行程式碼： //= require kamiliff 設定聊天機器人 Webhook URL 本文假設你已經有一個自己的聊天機器人，請將以下網址填入 LINE Bot 的 Webhook URL 欄位中： https://你的網域/line 第一次開發 LINE Bot 的人可以服用此帖 Webhook URL 設定 QA。 設定聊天機器人環境變數 請在專案根目錄下新增一個 .env 檔並且填入以下內容： LINE_CHANNEL_SECRET=這裡填入你的 LINE_CHANNEL_SECRET LINE_CHANNEL_TOKEN=這裡填入你的 LINE_CHANNEL_ACCESS_TOKEN LIFF_COMPACT=這裡填入你的 COMPACT_LIFF_URL LIFF_TALL=這裡填入你的 TALL_LIFF_URL LIFF_FULL=這裡填入你的 FULL_LIFF_URL LINE_CHANNEL_SECRET 可以在 Messaging API 後台的 Basic settings 分頁中找到。 LINE_CHANNEL_ACCESS_TOKEN 可以在 Messaging API 後台的 Messaging API 分頁中找到。 COMPACT_LIFF_URL、TALL_LIFF_URL 和 FULL_LIFF_URL 需要到 LINE 後台的 LIFF 分頁新增後，即可獲得一組 LIFF URL。 Kamigo 預設的 LIFF Size 為 Compact，你也可以只新增 Compact LIFF URL。 詳細的 LIFF 設定說明可以服用此帖 LIFF 設定 QA。 至此串接完成。 實際使用 Kamigo 預設使用基本的語意理解模型，會將使用者輸入視為在瀏覽器網址上輸入文字，並且以 LINE Flex Message 來顯示對應的結果。 開啟 LINE 和聊天機器人說 /，就能看到首頁的樣子。 使用 kamigo 製作的聊天機器人 kamigo demo 健身紀錄機器人: Muscle-Man 守護寵物機器人 詳細的說明文件 Kamigo 架構概觀 Route 的使用說明 Controller 的使用說明 View 的使用說明 Form 的使用說明 Kamigo 相關設定與 QA 計畫 提供多種語意理解模型串接 網站使用者與聊天機器人使用者綁定 支援 Telegram 支援 Facebook Messenger License The gem is available as open source under the terms of the MIT License. "},"01_intro.html":{"url":"01_intro.html","title":"Kamigo 架構概觀","keywords":"","body":"Kamigo 架構概觀 設計理念 Kamigo 是基於 Rails 的 Chatbot MVC Framework，竭盡所能的將聊天機器人的開發與網站開發做對應，並且盡可能的使用 Rails 既有的功能來增加彈性。 在聊天機器人開發當中的「語意理解」是對應到網站開發當中的路由（Route）。 「對話管理」對應到 Controller 以及 Model。 而「語言生成」則是對應到 view。 使用 Kamigo，你可以同時開發 Chatbot 以及 Web，而且共用 Controller 以及 Model。 架構概觀 Kamigo 實作了接受 LINE Webhook 的 Controller 以及對應的 Route。 controller: https://github.com/etrex/Kamigo/blob/master/app/controllers/line_controller.rb routes: https://github.com/etrex/Kamigo/blob/master/config/routes.rb 以上的程式碼使得 Kamigo 在接收到來自 Webhook 的訊息後，會將訊息用語意理解的方式轉換為（Intent）以及關鍵字（Entity），並且生成一個新的 Request 再發送給對應的 Controller Action，取得 Response 後，再使用 Reply API 將 Response 訊息回傳給用戶。 webhook 設定 從 routes.rb 當中可以看到這一行： post 'line', to: 'line#entry' 表示網站會接受 POST 到 /line 的 Request，並且交給 line_controller 當中的 entry 方法來處理。 這表示你應該在你的 LINE Bot 設定 Webhook Url 為 https://你的網域/line。 rails generator 在安裝 Kamigo 後，使用 rails g scaffold 可以生成 Kamigo 魔改後的 controller 以及 view。 以下簡單說明各項負責的功能。 routes Kamigo 沒有修改 rails routes 的實作。 line_controller 會讀取 LINE 訊息當中的文字訊息，並且嘗試理解文字訊息當中的意圖（intent）以及關鍵字（entity），也就是語意理解的部分， 目前僅實作了一個最基本的語意理解模型，直接假設用戶輸入的文字是網址來做解析，之後會支援各大語意理解平台的串接。 擷取出意圖以及關鍵字之後，會嘗試找到此意圖所對應的 controller action，並且將關鍵字作為 params 傳入此 action。 簡而言之，語意理解就像是在做 routes 的工作。 目前 Kamigo 支援在 routes 撰寫一些簡單的語意理解規則，比方說，你可以在你的專案當中的 routes.rb 寫入以下程式碼： get \"目錄\", to: 'home#menu' 當用戶在對 LINE Bot 發話時輸入「目錄」文字訊息時，就可以將 Request 交給 home_controller 當中的 menu 方法來處理。 詳細說明請參考 route Render Format 當用戶在對 LINE Bot 發話時輸入「目錄」時，實際上，Kamigo 會生成一個 GET https://你的網域/目錄.line 的 Request 網址當中的 .line 是在指定 render format，當一個 Request 的 Format 為 line 的時候，render engine 會去嘗試尋找 views 資料夾當中副檔名為 .line 的檔案。 你可以在 controller 當中透過 params[:format] 取得當下 Request 的 Format 為何。 Controller 在 controller 你可以在 params 收到一些來自 Kamigo 的參數，用來做身分驗證或取得用戶所發出的關鍵字等。 詳細說明請參考 controller View 在 view 當中，直接輸出 LINE Message API 所需要的 json 即可。 使用 Kamiflex 可以讓你輕鬆打造出 flex message。 詳細說明請參考 view Form 目前 Kamigo 僅提供 LIFF 作為表單填寫的解決方案，日後有可能會加入對話式表單的填寫。 Kamigo 使用 Kamiliff 來製作 LIFF，你可以在 controller 就取得用戶身分的參數。 詳細說明請參考 form "},"02_route.html":{"url":"02_route.html","title":"Route 的使用說明","keywords":"","body":"Route 的使用說明 以下將說明 Kamigo 如何解讀用戶輸入，並且找出對應的 Controller Action。 語意理解模型 Kamigo 目前使用了最簡單的解析器去解讀用戶輸入，其格式如下： {{http_method}} {{path}} {{json}} 舉例來說，若用戶輸入如下： GET /todos 即視為用戶對 /todos 發出 GET Request。 POST /todos {\"todo\":{\"name\":\"kamigo\"}} 即視為用戶對 /todos 發出 POST Reques，並且傳遞一個 json 作為 body。 預設值 其中，如果 http_method 是 GET 的話，可省略，path 開頭的 / 也可以省略，所以當用戶的輸入如下： GET /menu 或 /menu 或 menu 即視為用戶對 /menu 發出 GET Request。 之後 Kamigo 的計畫包含實作支援各大語意理解平台的 Adapter。 routes 以下示範在 routes.rb 適用於聊天機器人的各種寫法。 可以寫中文 get \"目錄\", to: 'home#menu' 如此即可接受用戶輸入「目錄」時，將 Request 轉給 home_controller 的 menu 方法來處理。 可以使用變數 get \"學 (*keyword) (*message)\", to: 'keywords#learn' 如此即可接受用戶輸入「學 A B」時，將 Request 轉給 keywords_controller 的 learn 方法來處理，你可以在 controller 當中寫 params[:keyword] 取得用戶輸入的 A，寫 params[:message] 取得用戶輸入的 B。 最後一個有括號的變數可省略輸入 get '(*location)天氣', to: 'weathers#show' 如此即可接受用戶輸入「台北天氣」時，將 Request 轉給 weathers_controller 的 show 方法來處理，你可以在 controller 當中寫 params[:location] 取得用戶輸入的「台北」。 get '(*location)天氣(*other)', to: 'weathers#show' 如此即可同時接受用戶輸入「台北天氣」以及「台北天氣如何」。 "},"03_controller.html":{"url":"03_controller.html","title":"Controller 的使用說明","keywords":"","body":"Controller 的使用說明 以下是在 controller 當中你可以取得的所有 params: platform_type platform_type 表示目前的 Request 是來自於哪一個通訊軟體。 Kamigo 目前僅支援 LINE，因此 platform_type 的值會是 \"line\"。 你可以使用以下程式碼取得 platform_type: platform_type = params.dig(:platform_type) source_type source_type 表示目前的 Request 是來自於那一種對話框，其可能的值為 \"user\"、\"room\"、\"group\"。 你可以使用以下程式碼取得 source_type: source_type = params.dig(:source_type) source_group_id source_group_id 表示目前 Request 是來自於哪一個對話框。 若 source_type 的值為 \"user\"，則 source_group_id 會與 LINE 提供的 userId 相等。 若 source_type 的值為 \"room\" 或 \"group\"，則 source_group_id 的值會等於 LINE 提供的 roomId 或 groupId。 你可以使用以下程式碼取得 source_group_id: source_group_id = params.dig(:source_group_id) source_user_id source_user_id 表示目前 Request 是來自於哪一個使用者。 source_user_id 會與 LINE 提供的 userId 相等。 在無法取得 userId 的某些情形下，source_user_id 的值將會與 source_group_id 相等。 你可以使用以下程式碼取得 source_user_id: source_user_id = params.dig(:source_user_id) message_type message_type 表示目前 Request 的訊息類型。 message_type 與 LINE 提供的 message.type 相等。 在無法取得 message.type 的某些情形下，message_type 的值將會與 event.type 相等。 你可以使用以下程式碼取得 message_type: message_type = params.dig(:message_type) message message_type 表示目前 Request 的訊息類型。 message_type 與 LINE 提供的 message.text, postback.data, message.address 相等。 在無法取得上述資訊的情形下，message 的值將會與 message_type 相等。 你可以使用以下程式碼取得 message: message = params.dig(:message) profile profile 表示目前 Request 的用戶資訊。 profile 內包含以下資訊： displayName userId pictureUrl language (僅於私訊時可取得) statusMessage (僅於私訊時可取得) 你可以使用以下程式碼取得相關資訊: displayName = params.dig(:profile, :displayName) userId = params.dig(:profile, :userId) pictureUrl = params.dig(:profile, :pictureUrl) language = params.dig(:profile, :language) statusMessage = params.dig(:profile, :statusMessage) payload payload 是 webhook 的原始資料，你可以在這裡取得 LINE 的完整 webhook event object。 你可以使用以下程式碼取得 payload: payload = params.dig(:payload) 身分驗證 你可以假設 source_group_id 以及 source_user_id 是秘密資訊，以 source_group_id 和 source_user_id 來識別當前對話框以及用戶。 "},"04_view.html":{"url":"04_view.html","title":"View 的使用說明","keywords":"","body":"View 的使用說明 在 view 當中，你可以根據不同的通訊平台，去製作對應的回覆內容。 Kamigo 會根據目前的平台，選擇對應的 render format，以 LINE 來說就會是 .line。 由於 Kamigo 目前只支援 LINE 通訊平台，因此目前只有 .line 可以使用。 舉例來說，如果你在 config/routes.rb 寫入以下程式： get \"目錄\", to: 'home#index' 而且你有 app/controllers/home_controller 內容如下： class HomeController 即表示你應該要在 app/views/home/index.line 或者 app/views/home/index.line.erb 或者 app/views/home/index.line.jbuilder 來寫你的回覆訊息。 比方說，你可以在 app/views/home/index.line 輸入以下訊息： { \"type\": \"text\", \"text\": \"Hello, world\" } 或者你可以在 app/views/home/index.line.erb 輸入以下訊息： 或者你可以在 app/views/home/index.line.jbuilder 輸入以下訊息： json.type \"text\" json.text \"Hello, world\" 最終都會產生出一樣的 json，也就是 LINE Messaging API 所要求的格式： { \"type\": \"text\", \"text\": \"Hello, world\" } 使用 Flex Message LINE Messaging API 提供了一種訊息格式，稱為 Flex Message。 你可以使用 Kamiflex 來快速生成 Flex Message。 目前在 view 當中使用 Kamiflex 的方法是使用 erb，比方說在 app/views/home/index.line.erb 輸入以下程式碼： 更多的 Kamiflex 使用說明 使用 LIFF 更換 LIFF Size 使用 liff_path 方法時，新增指定參數 liff_size： "},"05_kamiflex.html":{"url":"05_kamiflex.html","title":"Kamiflex 的使用說明","keywords":"","body":"概觀 Kamiflex 讓你以程式碼的方式取代直接編寫 Flex Messages 的 JSON，達到方便、簡潔、易維護易擴展的目的。Kamiflex 目前僅支援Line平台上的 Flex Message，在 Kamiflex 之下 Line Flex Message 的架構如下： Kamiflex 使用 Ruby 中的 Block 實作，各元件間以 Block 組裝，達成類巢狀函式的寫法。 以下示範Line Flex Message Simulator中的 Showcase： Ruby 寫法： json = Kamiflex.json(self) do bubble do hero \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/01_1_cafe.png\", size: :full, aspectRatio: \"20:13\", aspectMode: :cover, action: uri_action(\"http://linecorp.com/\") body do text \"Brown Cafe\", weight: :bold, size: :xl baseline_box margin: :md do icon \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png\", size: :sm icon \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png\", size: :sm icon \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png\", size: :sm icon \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png\", size: :sm icon \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gray_star_28.png\", size: :sm text \"4.0\", size: :sm, color: \"#999999\", margin: :md, flex: 0 end vertical_box margin: :lg, spacing: :sm do baseline_box spacing: :sm do text \"Place\", \"color\": \"#aaaaaa\", \"size\": \"sm\", \"flex\": 1 text \"Miraina Tower, 4-1-6 Shinjuku, Tokyo\", \"wrap\": true, \"color\": \"#666666\", \"size\": \"sm\", \"flex\": 5 end baseline_box spacing: :sm do text \"Time\", \"color\": \"#aaaaaa\", \"size\": \"sm\", \"flex\": 1 text \"10:00 - 23:00\", \"wrap\": true, \"color\": \"#666666\", \"size\": \"sm\", \"flex\": 5 end end end footer spacing: :sm, flex: 0 do url_button \"CALL\", \"https://linecorp.com\", style: :link, height: :sm url_button \"WEBSITE\", \"https://linecorp.com\", style: :link, height: :sm spacer size: :sm end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"hero\": { \"type\": \"image\", \"url\": \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/01_1_cafe.png\", \"size\": \"full\", \"aspectRatio\": \"20:13\", \"aspectMode\": \"cover\", \"action\": { \"type\": \"uri\", \"label\": \"http://linecorp.com/\", \"uri\": \"http://linecorp.com/\" } }, \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"Brown Cafe\", \"weight\": \"bold\", \"size\": \"xl\" }, { \"type\": \"box\", \"layout\": \"baseline\", \"contents\": [ { \"type\": \"icon\", \"url\": \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png\", \"size\": \"sm\" }, { \"type\": \"icon\", \"url\": \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png\", \"size\": \"sm\" }, { \"type\": \"icon\", \"url\": \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png\", \"size\": \"sm\" }, { \"type\": \"icon\", \"url\": \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gold_star_28.png\", \"size\": \"sm\" }, { \"type\": \"icon\", \"url\": \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/review_gray_star_28.png\", \"size\": \"sm\" }, { \"type\": \"text\", \"text\": \"4.0\", \"size\": \"sm\", \"color\": \"#999999\", \"margin\": \"md\", \"flex\": 0 } ], \"margin\": \"md\" }, { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"box\", \"layout\": \"baseline\", \"contents\": [ { \"type\": \"text\", \"text\": \"Place\", \"color\": \"#aaaaaa\", \"size\": \"sm\", \"flex\": 1 }, { \"type\": \"text\", \"text\": \"Miraina Tower, 4-1-6 Shinjuku, Tokyo\", \"wrap\": true, \"color\": \"#666666\", \"size\": \"sm\", \"flex\": 5 } ], \"spacing\": \"sm\" }, { \"type\": \"box\", \"layout\": \"baseline\", \"contents\": [ { \"type\": \"text\", \"text\": \"Time\", \"color\": \"#aaaaaa\", \"size\": \"sm\", \"flex\": 1 }, { \"type\": \"text\", \"text\": \"10:00 - 23:00\", \"wrap\": true, \"color\": \"#666666\", \"size\": \"sm\", \"flex\": 5 } ], \"spacing\": \"sm\" } ], \"margin\": \"lg\", \"spacing\": \"sm\" } ] }, \"footer\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"button\", \"action\": { \"type\": \"uri\", \"label\": \"CALL\", \"uri\": \"https://linecorp.com\" }, \"style\": \"link\", \"height\": \"sm\" }, { \"type\": \"button\", \"action\": { \"type\": \"uri\", \"label\": \"WEBSITE\", \"uri\": \"https://linecorp.com\" }, \"style\": \"link\", \"height\": \"sm\" }, { \"type\": \"spacer\", \"size\": \"sm\" } ], \"spacing\": \"sm\", \"flex\": 0 } } } 範例說明 在此範例中， Kamiflex 可拆解為四個部分講解。 第一部分 Flex Message Meta json = Kamiflex.json(self) do ... end puts json 此段為每一個 Flex Message 都必須使用的開頭，同時也是呼叫 Kamiflex 的 Class Method。 更多說明請查看 Flex Message Meta 第二部分 核心元件 json = Kamiflex.json(self) do # Flex Message Meta bubble do # 核心元件 ... end end puts json bubble 屬於核心元件，是一個 Flex Message 必須包含的內容，其需放置在 Flex Message 的 do ... end 之中，對於 Flex Message Meta 而言是一個區塊中的方法。 在 bubble 的 do ... end 中，必須放置 header、body 或 footer 任一方法後，才可以放入 容器元件 或是 基礎組件，更多說明請查看 核心元件 第三部分 容器元件 json = Kamiflex.json(self) do ... body do baseline_box margin: :md do #容器元件 ... end end end puts json baseline_box 屬於容器元件，容器元件必須放置於 header、body 或 footer 這三種方法的 do ... end 之中。 更多說明請查看 容器元件 第四部分 基礎組件 json = Kamiflex.json(self) do ... vertical_box margin: :lg, spacing: :sm do # 容器元件 baseline_box spacing: :sm do # 容器元件 text \"Place\", \"color\": \"#aaaaaa\", \"size\": \"sm\", \"flex\": 1 # 基礎組件 text \"Miraina Tower, 4-1-6 Shinjuku, Tokyo\", \"wrap\": true, \"color\": \"#666666\", \"size\": \"sm\", \"flex\": 5 # 基礎組件 end baseline_box spacing: :sm do # 容器元件 text \"Time\", \"color\": \"#aaaaaa\", \"size\": \"sm\", \"flex\": 1 # 基礎組件 text \"10:00 - 23:00\", \"wrap\": true, \"color\": \"#666666\", \"size\": \"sm\", \"flex\": 5 # 基礎組件 end end ... end puts json 此段中的 text 就是一種 基礎組件，基礎組件需被放在 容器元件 之中。 更多說明請查看 基礎組件 引數 在部分的元件後會加入引數，可以達到賦值和修飾 style 的效果。 例如： text \"Time\", \"color\": \"#aaaaaa\", \"size\": \"sm\", \"flex\": 1 這是一個 文字的基礎組件 在 Kamiflex/BasicElements.rb 中的定義如下： def text(message, **params) @flex_contents 依照定義，該元件可以接受兩種引數： message 為必填的引數 **params 需傳入一個 Hash ，為選填的引數 因此例句中的 \"Time\" 是對應 message 的引數，\"color\": \"#aaaaaa\", \"size\": \"sm\", \"flex\": 1 的部分則是一個 Hash，對應 **params，而該段例句也可以寫成： text \"Time\", { \"color\": \"#aaaaaa\", \"size\": \"sm\", \"flex\": 1} 但由於 {} 可以省略，因此才會變成原本的形式 每一個元件皆會說明其可接受的引數，除必填引數需按照順序填入，其餘選填引數則不受限制。 區塊中的方法 區塊指是 Ruby 中的 Block 也就是 do ... end，區塊中的方法將會在 do ... end 之中，每一個元件在區塊中可以放入的方法皆有所不同，如以下： json = Kamiflex.json(self) do bubble do body do text \"Hello, World!\" end end end puts json 根據下圖，在大部分的情況，各元件僅能包含下一層的元件： 在範例中，bubble 是個核心元件，因此會被包含在 Flex Message Meta 的 do ... end 之中，而text是個基礎組件，因此會被包含在容器元件之中(body會預設產生一個容器元件)。 但也有另外，例如以下範例： json = Kamiflex.json(self) do alt_text \"this is a flex message\" bubble do body do text \"Hello, World!\" end end end puts json alt_text並不屬於任何一個元件，但其該放置的位置為 Flex Message Meta 的 do...end 之中，關於各元件 do...end 中可使用的方法請依照其區塊中的方法。 "},"kamiflex/flex_message_meta.html":{"url":"kamiflex/flex_message_meta.html","title":"Flex Message Meta","keywords":"","body":"Flex Message Meta Flex Message Meta是每一個Flex Message一定會包含的部分，其Json為 { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": {...} } 對應的Kamiflex程式碼為 json = Kamiflex.json(self) do ... end puts json Kamiflex 會將該程式碼轉換為JSON，do...end為block，可以在其中放入 核心元件。 Class Method 下列為 Kamiflex 可以使用的 Class Method： .hash 使用 Kamiflex.hash 會傳回 Hash。 .json 使用 Kamiflex.json 會傳回 JSON。 可用的引數 說明 parent (必填) 此引數用於指定執行 Kamiflex 區塊的物件，其目的是為了在 Kamiflex 區塊中可以獲得變數的值以及呼叫方法，通常會傳入 self。 區塊中的方法 說明 alt_text 使用範例 Ruby 寫法： json = Kamiflex.json(self) do alt_text \"test alt text\" bubble do body do text \"Hello, World!\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"test alt text\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"Hello, World!\" } ] } } } 運行結果 "},"kamiflex/core.html":{"url":"kamiflex/core.html","title":"核心元件","keywords":"","body":"核心元件 核心元件需被寫在 Flex Message Meta 的 do ... end 之中。 Bubble 說明 此元件為 Flex Message 最基礎之核心元件。 詳細說明請參考以下連結： LINE Flex Message 關於 Bubble 的說明文件 LINE Flex Message 關於 Bubble 的 API Reference 可用的引數 說明 size 可以指定以下其中一個值： nano，micro，kilo，mega 或 giga。預設為 mega。 direction 可以指定以下其中一個值： ltr 或 rtl。預設為 ltr 。 action 區塊中的方法 說明 header hero body footer styles 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble size: \"nano\",direction: \"ltr\" do body do text \"Hello, World!\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"Hello, World!\" } ] }, \"size\": \"nano\", \"direction\": \"ltr\" } } Bubbles 說明 此元件需使用在 carousel 之中，達成橫向多筆 Flex Message，若不使用此核心元件，亦可使用 Ruby 原生的 #each 搭配 bubble 或是直接使用多個 bubble do...end 達到相同功能。 可用的引數 說明 size 可以指定以下其中一個值： nano，micro，kilo，mega 或 giga。預設為 mega。 direction 可以指定以下其中一個值： ltr 或 rtl。預設為 ltr 。 action 區塊中的方法 說明 header hero body footer styles 使用範例 使用 bubbles 的 Ruby 寫法： strings = [ \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"Hello, World!\" ] json = Kamiflex.json(self) do carousel do bubbles strings do |string| body layout: \"horizontal\" do text string,wrap: true end footer layout: \"horizontal\" do url_button \"Go\",\"https://example.com\",style: \"primary\" end end end end puts json 不使用 bubbles 的 Ruby 寫法： strings = [ \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"Hello, World!\" ] json = Kamiflex.json(self) do carousel do strings.each do |string| bubble do body layout: \"horizontal\" do text string,wrap: true end footer layout: \"horizontal\" do url_button \"Go\",\"https://example.com\",style: \"primary\" end end end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"carousel\", \"contents\": [ { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"horizontal\", \"contents\": [ { \"type\": \"text\", \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"wrap\": true } ] }, \"footer\": { \"type\": \"box\", \"layout\": \"horizontal\", \"contents\": [ { \"type\": \"button\", \"action\": { \"type\": \"uri\", \"label\": \"Go\", \"uri\": \"https://example.com\" }, \"style\": \"primary\" } ] } }, { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"horizontal\", \"contents\": [ { \"type\": \"text\", \"text\": \"Hello, World!\", \"wrap\": true } ] }, \"footer\": { \"type\": \"box\", \"layout\": \"horizontal\", \"contents\": [ { \"type\": \"button\", \"action\": { \"type\": \"uri\", \"label\": \"Go\", \"uri\": \"https://example.com\" }, \"style\": \"primary\" } ] } } ] } } Carousel 說明 此元件可以達成橫向多筆的 Flex Message，但在其之中還需要加上 bubble 元件。 LINE Flex Message 關於 Carousel 的說明文件 LINE Flex Message 關於 Carousel 的 API Reference 可用的引數 說明 無 區塊中的方法 說明 bubble bubbles 最多12個 bubble 使用範例 使用 bubbles 的 Ruby 寫法： strings = [ \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"Hello, World!\" ] json = Kamiflex.json(self) do carousel do bubbles strings do |string| body layout: \"horizontal\" do text string,wrap: true end footer layout: \"horizontal\" do url_button \"Go\",\"https://example.com\",style: \"primary\" end end end end puts json 不使用 bubbles 的 Ruby 寫法： strings = [ \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"Hello, World!\" ] json = Kamiflex.json(self) do carousel do strings.each do |string| bubble do body layout: \"horizontal\" do text string,wrap: true end footer layout: \"horizontal\" do url_button \"Go\",\"https://example.com\",style: \"primary\" end end end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"carousel\", \"contents\": [ { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"horizontal\", \"contents\": [ { \"type\": \"text\", \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"wrap\": true } ] }, \"footer\": { \"type\": \"box\", \"layout\": \"horizontal\", \"contents\": [ { \"type\": \"button\", \"action\": { \"type\": \"uri\", \"label\": \"Go\", \"uri\": \"https://example.com\" }, \"style\": \"primary\" } ] } }, { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"horizontal\", \"contents\": [ { \"type\": \"text\", \"text\": \"Hello, World!\", \"wrap\": true } ] }, \"footer\": { \"type\": \"box\", \"layout\": \"horizontal\", \"contents\": [ { \"type\": \"button\", \"action\": { \"type\": \"uri\", \"label\": \"Go\", \"uri\": \"https://example.com\" }, \"style\": \"primary\" } ] } } ] } } Header 說明 需放置在 bubble 或是 bubbles 的 do ... end 之中。呈現在 Flex Message 的最頂部，一般用來放置標題使用。 Kamflex 會為 header 自動創立一個容器元件 box，關於容器元件 box 引數請參考官方文件中的 LINE Flex Message 關於 BOX 的 API Reference。 此處無法直接修飾 header 的 style，若想修飾 header 的 style 請使用 styles 可用的引數 說明 layout backgroundColor borderColor borderWidth cornerRadius width height flex spacing margin paddingAll paddingTop paddingBottom paddingStart paddingEnd position offsetTop offsetBottom offsetStart offsetEnd action justifyContent alignItems background.type background.angle background.startColor background.endColor background.centerColor background.centerPosition 區塊中的方法 說明 容器元件 基礎組件 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do header layout: \"vertical\", borderWidth: \"light\", backgroundColor: \"#c3c3c3\" do text \"hello, wrold!\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"header\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"hello, wrold!\" } ], \"borderWidth\": \"light\", \"backgroundColor\": \"#c3c3c3\" } } } Hero 說明 需放置在 bubble 或是 bubbles 的 do ... end 之中。呈現在Flex Message header 之下，body 之上，一般用來放置圖片，由於不需要搭配block。後方不需再加入{...}或是do...end。 kamiflex 預設 hero 的 type 為 Image 元件，相關引述請搭配 LINE Flex Message 關於 Image 的 API Reference。 此處無法直接修飾 hero 的 style，若想修飾 hero 的 style 請使用 styles hero 的 type 除了 image 元件外，也可以選擇為 box 元件 可用的引數 說明 image_url (必填) flex margin position offsetTop offsetBottom offsetStart offsetEnd align gravity size aspectRatio aspectMode backgroundColor animated action 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do hero \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/01_1_cafe.png\", size: :full, aspectRatio: \"20:13\" end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"hero\": { \"type\": \"image\", \"url\": \"https://scdn.line-apps.com/n/channel_devcenter/img/fx/01_1_cafe.png\", \"size\": \"full\", \"aspectRatio\": \"20:13\" } } } Body 說明 需放置在 bubble 或是 bubbles 的 do ... end 之中。呈現在 Flex Message 中間的位置，一般用於表達內文。 Kamflex 會為 body 自動創立一個容器元件 box，關於容器元件 box 引數請參考官方文件中的 LINE Flex Message 關於 BOX 的 API Reference 此處無法直接修飾 body 的 style，若想修飾 body 的 style 請使用 styles 可用的引數 說明 layout backgroundColor borderColor borderWidth cornerRadius width height flex spacing margin paddingAll paddingTop paddingBottom paddingStart paddingEnd position offsetTop offsetBottom offsetStart offsetEnd action justifyContent alignItems background.type background.angle background.startColor background.endColor background.centerColor background.centerPosition 區塊中的方法 說明 容器元件 基礎組件 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body layout: \"vertical\", borderWidth: \"light\", backgroundColor: \"#c3c3c3\" do text \"hello, wrold!\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"hello, wrold!\" } ], \"borderWidth\": \"light\", \"backgroundColor\": \"#c3c3c3\" } } } Footer 說明 需放置在 bubble 或是 bubbles 的 do ... end 之中。呈現在 Flex Message 中間的位置，一般用於放置按鈕。 Kamflex 會為 footer 自動創立一個容器元件 box，關於容器元件 box 引數請參考官方文件中的 LINE Flex Message 關於 BOX 的 API Reference 此處無法直接修飾 footer 的 style，若想修飾 footer 的 style 請使用 styles 可用的引數 說明 layout backgroundColor borderColor borderWidth cornerRadius width height flex spacing margin paddingAll paddingTop paddingBottom paddingStart paddingEnd position offsetTop offsetBottom offsetStart offsetEnd action justifyContent alignItems background.type background.angle background.startColor background.endColor background.centerColor background.centerPosition 區塊中的方法 說明 容器元件 基礎組件 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do footer layout: \"vertical\", borderWidth: \"light\", backgroundColor: \"#c3c3c3\" do text \"hello, wrold!\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"footer\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"hello, wrold!\" } ], \"borderWidth\": \"light\", \"backgroundColor\": \"#c3c3c3\" } } } Styles 說明 主要功能為修飾 header、hero、body、footer 的style。 請參考官方文件中的 LINE Flex Message 關於 Block Style 的 API Reference。 可用的引數 說明 僅接受一個 Hash， 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble size: \"mega\" do header do text \"Kamiflex\" end hero \"https://stickershop.line-scdn.net/stickershop/v1/product/1500785/LINEStorePC/main.png;compress=true\" body do text \"用kamiflex就是這麼簡單\",wrap: true end footer do message_button \"同意\", \"不只好用還好潮！真的讚！\" end styles header: { backgroundColor: \"#ffffff\", separator: true, separatorColor: \"#c2c2c2\", }, hero: { separator: true, separatorColor: \"#c2c2c2\", }, body: { backgroundColor: \"#ffffff\", separator: true, separatorColor: \"#c2c2c2\", }, footer: { backgroundColor: \"#ffffff\", separator: true, separatorColor: \"#c2c2c2\", } end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"header\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"Kamiflex\" } ] }, \"hero\": { \"type\": \"image\", \"url\": \"https://stickershop.line-scdn.net/stickershop/v1/product/1500785/LINEStorePC/main.png;compress=true\" }, \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"\\b用kamiflex就是這麼簡單\", \"wrap\": true } ] }, \"footer\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"button\", \"action\": { \"type\": \"message\", \"label\": \"同意\", \"text\": \"不只好用還好潮！真的讚！\" } } ] }, \"styles\": { \"header\": { \"backgroundColor\": \"#ffffff\", \"separator\": true, \"separatorColor\": \"#c2c2c2\" }, \"hero\": { \"separator\": true, \"separatorColor\": \"#c2c2c2\" }, \"body\": { \"backgroundColor\": \"#ffffff\", \"separator\": true, \"separatorColor\": \"#c2c2c2\" }, \"footer\": { \"backgroundColor\": \"#ffffff\", \"separator\": true, \"separatorColor\": \"#c2c2c2\" } }, \"size\": \"mega\" } } "},"kamiflex/container.html":{"url":"kamiflex/container.html","title":"容器元件","keywords":"","body":"容器元件 容器元件需被放置在 header、body 或 footer 的 do ... end 之中。 Horizontal Box 說明 Kamiflex 會為 Horizontal Box 新增一個 box，並且將該 box 的 layout 引數設成 horizontal，關於 box 的說明請參考官方文件中的 LINE Flex Message 關於 BOX 的 API Reference。 可用的引數 說明 layout backgroundColor borderColor borderWidth cornerRadius width height flex spacing margin paddingAll paddingTop paddingBottom paddingStart paddingEnd position offsetTop offsetBottom offsetStart offsetEnd action justifyContent alignItems background.type background.angle background.startColor background.endColor background.centerColor background.centerPosition 區塊中的方法 說明 容器元件 基礎組件 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do horizontal_box backgroundColor: \"#f2f2f2\",cornerRadius: \"20px\" do text \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",wrap:true,color:\"#ff0000\",flex: 2 text \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",wrap:true,color:\"#0000ff\",flex: 2 end end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"box\", \"layout\": \"horizontal\", \"contents\": [ { \"type\": \"text\", \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"wrap\": true, \"color\": \"#ff0000\", \"flex\": 2 }, { \"type\": \"text\", \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"wrap\": true, \"color\": \"#0000ff\", \"flex\": 2 } ], \"backgroundColor\": \"#f2f2f2\", \"cornerRadius\": \"20px\" } ] } } } Vertical Box 說明 Kamiflex 會為 Vertical Box 新增一個 box，並且將該 box 的 layout 引數設成 vertical，關於 box 的說明請參考官方文件中的 LINE Flex Message 關於 BOX 的 API Reference。 可用的引數 說明 layout backgroundColor borderColor borderWidth cornerRadius width height flex spacing margin paddingAll paddingTop paddingBottom paddingStart paddingEnd position offsetTop offsetBottom offsetStart offsetEnd action justifyContent alignItems background.type background.angle background.startColor background.endColor background.centerColor background.centerPosition 區塊中的方法 說明 容器元件 基礎組件 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do vertical_box backgroundColor: \"#f2f2f2\",cornerRadius: \"20px\" do text \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",wrap:true,color:\"#ff0000\",flex: 2 text \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",wrap:true,color:\"#0000ff\",flex: 2 end end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"wrap\": true, \"color\": \"#ff0000\", \"flex\": 2 }, { \"type\": \"text\", \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"wrap\": true, \"color\": \"#0000ff\", \"flex\": 2 } ], \"backgroundColor\": \"#f2f2f2\", \"cornerRadius\": \"20px\" } ] } } } Baseline Box 說明 Kamiflex 會為 Baseline Box 新增一個 box，並且將該 box 的 layout 引數設成 baseline，關於 box 的說明請參考官方文件中的 LINE Flex Message 關於 BOX 的 API Reference。 關於 baseline_box 與 horizontal_box 的差別，請查看官方文件中的 Characteristics of a baseline box 可用的引數 說明 layout backgroundColor borderColor borderWidth cornerRadius width height flex spacing margin paddingAll paddingTop paddingBottom paddingStart paddingEnd position offsetTop offsetBottom offsetStart offsetEnd action justifyContent alignItems background.type background.angle background.startColor background.endColor background.centerColor background.centerPosition 區塊中的方法 說明 容器元件 基礎組件 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do baseline_box backgroundColor: \"#f2f2f2\",cornerRadius: \"20px\" do text \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",wrap:true,color:\"#ff0000\",flex: 2 text \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\",wrap:true,color:\"#0000ff\",flex: 2 end end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"box\", \"layout\": \"baseline\", \"contents\": [ { \"type\": \"text\", \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"wrap\": true, \"color\": \"#ff0000\", \"flex\": 2 }, { \"type\": \"text\", \"text\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\", \"wrap\": true, \"color\": \"#0000ff\", \"flex\": 2 } ], \"backgroundColor\": \"#f2f2f2\", \"cornerRadius\": \"20px\" } ] } } } "},"kamiflex/basic_element.html":{"url":"kamiflex/basic_element.html","title":"基礎組件","keywords":"","body":"基礎組件 基礎組件需被包含在 容器元件 或是 header、body 或 footer 的 do ... end 之中。 Text 說明 Text 是用來放置文字的元件，關於 Text 的說明請參考官方文件中的 LINE Flex Message 關於 Text 的 API Reference。 可用的引數 說明 message (必填) adjustMode flex margin position offsetTop offsetBottom offsetStart offsetEnd size align gravity wrap maxLines weight color action style decoration 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do text \"Hello, World!\", color:\"#ff0000\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"Hello, World!\", \"color\": \"#ff0000\" } ] } } } Image 說明 Image 是用來放置圖片的元件，關於 Image 的說明請參考官方文件中的 LINE Flex Message 關於 Image 的 API Reference。 可用的引數 說明 url (必填) flex margin position offsetTop offsetBottom offsetStart offsetEnd align gravity size aspectRatio aspectMode backgroundColor action animated 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do image \"https://www.kamigo.tw/assets/kamigo-c3b10dff4cdb60fa447496b22edad6c32fffde96de20262efba690892e4461e8.png\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"image\", \"url\": \"https://www.kamigo.tw/assets/kamigo-c3b10dff4cdb60fa447496b22edad6c32fffde96de20262efba690892e4461e8.png\" } ] } } } Icon 說明 Icon 僅能放置在 baseline_box 中，關於 Icon 的說明請參考官方文件中的 LINE Flex Message 關於 Icon 的 API Reference。 可用的引數 說明 url (必填) margin position offsetTop offsetBottom offsetStart offsetEnd size aspectRatio 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body layout: \"baseline\" do icon \"https://www.kamigo.tw/assets/kamigo-c3b10dff4cdb60fa447496b22edad6c32fffde96de20262efba690892e4461e8.png\" text \"這是卡米狗哦\", offsetStart: \"20px\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"baseline\", \"contents\": [ { \"type\": \"icon\", \"url\": \"https://www.kamigo.tw/assets/kamigo-c3b10dff4cdb60fa447496b22edad6c32fffde96de20262efba690892e4461e8.png\" }, { \"type\": \"text\", \"text\": \"這是卡米狗哦\", \"offsetStart\": \"20px\" } ] } } } Separator 說明 Separator 是一個分隔線元件，關於 Separator 的說明請參考官方文件中的 LINE Flex Message 關於 Separator 的 API Reference。 可用的引數 說明 margin color 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do text \"牛郎\" separator text \"織女\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"牛郎\" }, { \"type\": \"separator\", \"margin\": \"md\", \"color\": \"#000000\" }, { \"type\": \"text\", \"text\": \"織女\" } ] } } } Filler 說明 Filler 是一個空白元件，關於 Filler 的說明請參考官方文件中的 LINE Flex Message 關於 Filler 的 API Reference。 可用的引數 說明 flex 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do text \"Hello\" filler text \"World\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"Hello\" }, { \"type\": \"filler\" }, { \"type\": \"text\", \"text\": \"World\" } ] } } } Message Button 說明 Message Button 是點擊後會傳送文字的 Button，關於 Button 的說明請參考官方文件中的 LINE Flex Message 關於 Button 的 API Reference。 可用的引數 說明 label (必填) 按鈕上的文字 message (必填) 點擊按鈕會傳送的文字 flex margin position offsetTop offsetBottom offsetStart offsetEnd height style color gravity adjustMode 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do message_button \"這是一個 Message Button\", \"傳送的文字\", style: \"primary\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"button\", \"action\": { \"type\": \"message\", \"label\": \"這是一個 Message Button\", \"text\": \"傳送的文字\" }, \"style\": \"primary\" } ] } } } URL Button 說明 URL Button 是點擊後會開啟指定網頁的 Button，關於 Button 的說明請參考官方文件中的 LINE Flex Message 關於 Button 的 API Reference。 可用的引數 說明 label (必填) 按鈕上的文字 url (必填) 點擊按鈕會開啟的網址 flex margin position offsetTop offsetBottom offsetStart offsetEnd height style color gravity adjustMode 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do url_button \"這是一個 URL Button\", \"https://www.kamigo.tw/\", style: \"primary\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"button\", \"action\": { \"type\": \"uri\", \"label\": \"這是一個 URL Button\", \"uri\": \"https://www.kamigo.tw/\" }, \"style\": \"primary\" } ] } } } Postback Button 說明 Postback Button 是點擊後會傳送特定資料(使用者看不到)的 Button，關於 Button 的說明請參考官方文件中的 LINE Flex Message 關於 Button 的 API Reference。 可用的引數 說明 label (必填) 按鈕上的文字 data (必填) 點擊按鈕會傳送的資料 flex margin position offsetTop offsetBottom offsetStart offsetEnd height style color gravity adjustMode 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do postback_button \"這是一個 Postback Button\", \"這是機密資料你看不到\", style: \"primary\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"button\", \"action\": { \"type\": \"postback\", \"label\": \"這是一個 Postback Button\", \"data\": \"這是機密資料你看不到\" }, \"style\": \"primary\" } ] } } } Postback Text Button 說明 Postback Text Button 是點擊後會傳送特定資料(使用者看不到)和傳送文字的 Button，關於 Button 的說明請參考官方文件中的 LINE Flex Message 關於 Button 的 API Reference。 可用的引數 說明 label (必填) 按鈕上的文字 message (必填) 點擊按鈕會傳送的文字 data (必填) 點擊按鈕會傳送的資料 flex margin position offsetTop offsetBottom offsetStart offsetEnd height style color gravity adjustMode 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body flex: 10 do postback_text_button \"這是 Postback Text Button\", \"這是文字訊息你看得到\", \"這是機密資料你看不到\", style: \"primary\" end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"button\", \"action\": { \"type\": \"postback\", \"label\": \"這是 Postback Text Button\", \"displayText\": \"這是文字訊息你看得到\", \"data\": \"這是機密資料你看不到\" }, \"style\": \"primary\" } ], \"flex\": 10 } } } "},"kamiflex/action.html":{"url":"kamiflex/action.html","title":"點擊事件","keywords":"","body":"點擊事件 Action 可以為 基礎組件 或部分的 基礎組件 新增點擊事件。 Message Action 說明 Message Action 是一個點擊後會傳送文字的 Action，關於 Action 的說明請參考官方文件中的 LINE Flex Message 關於 Action 的 API Reference。 可用的引數 說明 label (必填) text 點擊後會傳送的文字，預設與 label 一樣 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do text \"這是文字方塊，但你點點看\", action: message_action(\"就算是文字方塊，照樣可以觸發 Action\") end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"這是文字方塊，但你點點看\", \"action\": { \"type\": \"message\", \"label\": \"就算是文字方塊，照樣可以觸發 Action\", \"text\": \"就算是文字方塊，照樣可以觸發 Action\" } } ] } } } URI Action 說明 URI Action 是一個點擊後會開啟指定網頁的 Action，關於 Action 的說明請參考官方文件中的 LINE Flex Message 關於 Action 的 API Reference。 可用的引數 說明 url (必填) label altUri.desktop 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do text \"這是文字方塊，但你點點看\", action: uri_action(\"https://www.kamigo.tw/\") end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"這是文字方塊，但你點點看\", \"action\": { \"type\": \"uri\", \"label\": \"https://www.kamigo.tw/\", \"uri\": \"https://www.kamigo.tw/\" } } ] } } } Postback Action 說明 Postback Action 是一個點擊後會傳送資料(使用者看不到)的 Action，關於 Action 的說明請參考官方文件中的 LINE Flex Message 關於 Action 的 API Reference。 可用的引數 說明 data (必填) 點擊按鈕會傳送的資料 label displayText text 點擊按鈕會傳送的文字 區塊中的方法 說明 無 使用範例 Ruby 寫法： json = Kamiflex.json(self) do bubble do body do text \"這是文字方塊，但你點點看\", action: postback_action(\"這是機密資料你看不到\", text: \"這是文字訊息你看得到\") end end end puts json 對應的 JSON： { \"type\": \"flex\", \"altText\": \"this is a flex message\", \"contents\": { \"type\": \"bubble\", \"body\": { \"type\": \"box\", \"layout\": \"vertical\", \"contents\": [ { \"type\": \"text\", \"text\": \"這是文字方塊，但你點點看\", \"action\": { \"type\": \"postback\", \"data\": \"這是機密資料你看不到\", \"text\": \"這是文字訊息你看得到\" } } ] } } } "},"kamiflex/showcase.html":{"url":"kamiflex/showcase.html","title":"Showcase","keywords":"","body":"Showcase Restaurant 程式碼連結 Apparel 程式碼連結 Hotel 程式碼連結 Local Search 程式碼連結 Real Estate 程式碼連結 Social 程式碼連結 TODO app 程式碼連結 Transit 程式碼連結 Receipt 程式碼連結 Shopping 程式碼連結 Menu 程式碼連結 Ticket 程式碼連結 "},"kamiflex/tools.html":{"url":"kamiflex/tools.html","title":"相關工具","keywords":"","body":"相關工具 Kamiflex Simulator 相關連結 Line Simulator 相關連結 輔助開發 LINE Flex 訊息的工具 帝霸狗 相關連結 Flex 開發人員工具 相關連結 "},"06_form.html":{"url":"06_form.html","title":"Form 的使用說明","keywords":"","body":"Form 的使用說明 Kamigo 使用 Kamiliff 來製作 LIFF 形式的表單。 LIFF 是可以在 LINE 開啟網頁，並且可以讓你獲得目前使用者相關資訊，以及幫使用者發訊息的技術。 Kamiliff 讓你可以不用撰寫 js，就能夠製作表單。 "},"07_setting.html":{"url":"07_setting.html","title":"Kamigo 相關設定與 QA","keywords":"","body":"Webhook URL 設定 QA 如何設定開發環境網域？ 安裝 ngrok。 在 bash 執行 ngrok 來獲得對應 http://localhost:3000 的網域。 $ ./ngrok http 3000 將獲得的網域替換掉花刮號的部分後，填入 Webhook URL 欄位。（留意網域後是否有確實加上 /line） https://{NGROK_HTTPS_DOMAIN}/line 在 Messaging API 後台開啟 Use webhook 設定。 另外開一個 bash 執行 $ rails s。 點擊 Verify 按鈕發送一個 POST Request 確認設定是否成功。 重開 ngrok 後，Webhook URL 就失效了？ 若你重新執行 ngrok，則 ngrok 會產生新的網域，你需要變更 LINE Bot 的 Webhook URL 和 LIFF app 的 Endpoint URL 為新的網域。 完成串接流程，但 Kamigo 沒有反應？ 若 Webhook URL 和 .env 檔都設定完，Kamigo 仍沒有反應，請確認以下兩個設定： 確認你的網域是否正確。 確認 Use webhook 是否為開啟狀態。 LIFF 設定 QA 如何新增 LIFF？ 由於 LIFF v2 改善，LINE 官方在 2020/02/05 發布通知，日後新增 LIFF 需到 LINE Login 的 LIFF 分頁新增，原先在 Messaging API 新增的 LIFF 還能繼續使用。 在 LINE Login 後台新增 3 種不同 size 的 LIFF，新增完會各獲得一組 LIFF URL；若你在 Messaging API 有設定好的 LIFF，請參考下方設定修改 Endpoint URL。（留意網域後是否有確實加上 /liff_entry） Compact LIFF app name: Compact Size: Compact Endpoint URL: https://你的網域/liff_entry Tall LIFF app name: Tall Size: Tall Endpoint URL: https://你的網域/liff_entry Full LIFF app name: Full Size: Full Endpoint URL: https://你的網域/liff_entry 在 .env 檔中分別填入對應 size 的 3 個 LIFF URL。 於 Messaging API 所建立的 LIFF（v1） LIFF_COMPACT=line://app/{FOR_COMPACT_LIFF_ID} LIFF_TALL=line://app/{FOR_TALL_LIFF_ID} LIFF_FULL=line://app/{FOR_FULL_LIFF_ID} 於 LINE Login 所建立的 LIFF（v2） LIFF_COMPACT=https://liff.line.me/{FOR_COMPACT_LIFF_ID} LIFF_TALL=https://liff.line.me/{FOR_TALL_LIFF_ID} LIFF_FULL=https://liff.line.me/{FOR_FULL_LIFF_ID} "}}